name: datadog-agent-nvml

on:
  push:
    branches:
      - "**"
    paths:
      - Dockerfile
  workflow_dispatch:
  release:
    types:
      - "published"

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Build container image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ github.workflow }}
          tags: latest ${{ github.sha }}
          containerfiles: |
            ./Dockerfile

  # This job creates a strategy matrix for subsequent jobs from the config.json file that is hosted in the same
  # directory as the workflows. This allows us to configure the repositories to which the image will be pushed in a
  # centralized location, keeping the workflow code DRY.
  build-matrix:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Configure a re-usable strategy matrix
        id: set-matrix
        working-directory: .github/workflows
        run: echo "::set-output name=matrix::$(jq -cr . config.json)"

  publish:
    runs-on: ubuntu-latest
    needs: [build-matrix]
    strategy:
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    environment:
      name: ${{ matrix.account_name }}-${{ matrix.account_id }}
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'

    steps:
      - name: Check out the code
        uses: actions/checkout@v3
        with:
          # fetch-depth needs to be set to 0 so that the job can fetch all the tags
          fetch-depth: 0

      - name: Get the latest tag
        id: latest-tag
        run: |
          echo "::set-output name=latest-tag::$(git tag --sort "-committerdate" | sed -n 1p)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check if image exists already
        id: image-exists
        run: |
          echo "::set-output name=image-exists::$(aws ecr describe-images --repository-name=${{ github.workflow }} --image-ids=imageTag=${{ steps.latest-tag.outputs.latest-tag }})"

      - name: Build container image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        if: steps.image-exists.outputs.image-exists != 0
        with:
          image: ${{ github.workflow }}
          tags: latest ${{ steps.latest-tag.outputs.latest-tag }}
          containerfiles: |
            ./Dockerfile

      - name: Push to ECR
        uses: redhat-actions/push-to-registry@v2
        if: steps.image-exists.outputs.image-exists != 0
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ steps.login-ecr.outputs.registry }}
