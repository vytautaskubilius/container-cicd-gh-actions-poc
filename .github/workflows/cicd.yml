name: datadog-agent-nvml

on:
  push:
    branches:
      - "**"
    paths:
      - Dockerfile
  workflow_dispatch:
  release:
    types:
      - "published"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build container image
        uses: docker/build-push-action@v2
        with:
          tags: ${{ github.workflow }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.sha }}
          path: /tmp/image.tar

  # This job creates a strategy matrix for the publish job from the config.json file that is hosted in the same
  # directory as the workflow. This allows us to configure the repositories to which the image will be pushed in a
  # centralized location, keeping the workflow code DRY.
  publish-matrix:
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'workflow_dispatch' && github.ref_name == 'main') || github.event_name == 'release'

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Configure a re-usable strategy matrix
        id: set-matrix
        working-directory: .github/workflows
        run: echo "::set-output name=matrix::$(jq -cr . config.json)"

  publish:
    runs-on: ubuntu-latest
    needs: [publish-matrix]
    strategy:
      matrix: ${{ fromJson(needs.publish-matrix.outputs.matrix) }}
      fail-fast: false
    environment:
      name: ${{ matrix.account_name }}-${{ matrix.account_id }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v3
        with:
          # fetch-depth needs to be set to 0 so that the job can fetch all the tags
          fetch-depth: 0

      - name: Get the latest git tag
        id: latest-tag
        run: |
          echo "::set-output name=latest-tag::$(git tag --sort "-committerdate" | sed -n 1p)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # The output of this step is used as a condition for running the subsequent build and publish steps.
      # The workflow will only build and publish the image if one doesn't already exist in the target repository
      # with the latest git tag.
      - name: Check if image exists already
        id: image-exists
        run: |
          echo "::set-output name=image-exists::$(aws ecr describe-images --repository-name=${{ github.workflow }} --image-ids=imageTag=${{ steps.latest-tag.outputs.latest-tag }} &> /dev/null; echo $?)"

      - name: Download artifact
        if: steps.image-exists.outputs.image-exists != 0
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.sha }}
          path: /tmp

      - name: Load image
        if: steps.image-exists.outputs.image-exists != 0
        run: |
          podman load --input /tmp/image.tar

      - name: Push to ECR
        uses: redhat-actions/push-to-registry@v2
        if: steps.image-exists.outputs.image-exists != 0
        with:
          image: ${{ github.workflow }}
          tags: latest ${{ steps.latest-tag.outputs.latest-tag }}
          registry: ${{ steps.login-ecr.outputs.registry }}
